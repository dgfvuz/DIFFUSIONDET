1. 创建python环境
2. 控制台pip install torchvision
3. 控制台pip install opencv-python
4. 前往https://github.com/facebookresearch/detectron2/blob/main/INSTALL.md#installation 安装detectron2,推荐使用Source来build
5. python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'
6. 数据集处理脚本已添加,为script.py 详情见注释
7. 更改Pascalvoc.py文件内容
    (运行前不改,因为这个文件路径需要你的运行报错信息才能得到,这个是属于detectron2库的问题,需要你去改他的源代码):
    CLASS_NAMES = ('missing_hole','mouse_bite', 'open_circuit', 'short', 'spur', 'spurious_copper')
8. pip install timm
9. 更改configs/Base-DiffusionDet.yaml 的
SOLVER:
  IMS_PER_BATCH: 1 
不一定是1 也可以是其他较小的值, 如果过大会报错:显存分配不足
10. 更改configs/diffdet.coco.res101.yaml的
  DiffusionDet:
    NUM_PROPOSALS: 500
    NUM_CLASSES: 6
DATASETS:
  TRAIN: ("voc_2007_train",)
  TEST:  ("voc_2007_val",)
SOLVER:
  STEPS: (7000, 8400)
  MAX_ITER: 9000

11. 下载两个模型

mkdir models
cd models
# ResNet-101
wget https://github.com/ShoufaChen/DiffusionDet/releases/download/v0.1/torchvision-R-101.pkl

# Swin-Base
wget https://github.com/ShoufaChen/DiffusionDet/releases/download/v0.1/swin_base_patch4_window7_224_22k.pkl

12. 控制台启动
python train_net.py --num-gpus 1 --config-file configs/diffdet.coco.res101.yaml
控制台评估

python train_net.py --num-gpus 1 --config-file configs/diffdet.coco.res101.yaml --eval-only MODEL.WEIGHTS path/to/model.pth

ps: 可以看一下GETTING_STARTED.md, 帮助你理解一下各个步骤
    关于处理后的训练集,可以找我要,也可以去下载原数据集然后解压到datasets路径下,然后用script.py内的脚本来生成
    原数据集的路径结构为
    -datasets 
      -PCB_DATASET
        -Annotations
        -images
        -PCB_USED
        -rotation 
        -rotate.py 
    生成的数据集的路径结构为
    -datasets
       - VOC2007
           - Annotations
           - ImageSets
               - Main
                   - test.txt
                   - train.txt
                   - trainval.txt
                   - val.txt
           - JPEGImages


13. 评估过程,使用控制台评估:
  1. 首先更改 configs/diffdet.coco.res101.yaml 的内容：如下所示: 主要是改一下模型路径
      # WEIGHTS: "models/torchvision-R-101.pkl"
      WEIGHTS: output/model_final.pth
  2. 在控制台输入: python demo.py --input ./test.jpg --output test_out.jpg --config-file configs/diffdet.coco.res101.yaml --output-result result
    这里解释各项参数的作用: 
    demo.py 是脚本文件
    --input 是输入文件, 可以是某个文件, 也可以是文件夹中的某种后缀的文件, 比如testfolder/*.jpg
    --output 是输出可视化, 可以是某个文件，也可以是某个文件夹
    --output-result 是你需要的json文件所在的文件夹，他会对某个图片的结果输出一个json文件
    --config-file 是模型的配置文件地址,这里由于是使用configs/diffdet.coco.res101.yaml训练的,那么只能是它

14. 评估过程, 使用统一的接口评估
  在script.py文件中第380行定义的函数，输入参数为image, 格式见注释, 输出参数为json格式的字符串, 格式见注释